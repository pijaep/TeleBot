import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

TOKEN = "8097626872:AAFBA-Xbvhx3EFbhuY9ZxI9tSBhCjocr-4Q"

bot = Bot(token=TOKEN)
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReminderState(StatesGroup):
    waiting_for_text = State()
    waiting_for_datetime = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("reminders.db")
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        datetime TEXT,
        text TEXT
    )""")
    conn.commit()
    conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def add_reminder(user_id, reminder_datetime, text):
    conn = sqlite3.connect("reminders.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO reminders (user_id, datetime, text) VALUES (?, ?, ?)",
                (user_id, reminder_datetime, text))
    conn.commit()
    conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_reminders(user_id):
    conn = sqlite3.connect("reminders.db")
    cur = conn.cursor()
    cur.execute("SELECT id, datetime, text FROM reminders WHERE user_id = ?", (user_id,))
    reminders = cur.fetchall()
    conn.close()
    return reminders


# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def delete_reminder(reminder_id):
    conn = sqlite3.connect("reminders.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
    conn.commit()
    conn.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders():
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        conn = sqlite3.connect("reminders.db")
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, text FROM reminders WHERE datetime = ?", (now,))
        reminders = cur.fetchall()

        for reminder in reminders:
            reminder_id, user_id, text = reminder
            await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
            delete_reminder(reminder_id)

        conn.close()
        await asyncio.sleep(60)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
@dp.message(Command("start"))
async def start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="remind")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–ø—É—Å–∫ FSM)
@dp.message(Command("remind"))
async def remind_start(message: Message, state: FSMContext):
    await state.set_state(ReminderState.waiting_for_text)  # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º set_state –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    state_data = await state.get_data()
    if "text_set" not in state_data:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_remind")]
        ])
        await message.answer("üìù –û —á—ë–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", reply_markup=kb)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(ReminderState.waiting_for_text)
async def remind_text_received(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    state_data = await state.get_data()
    if "text_set" in state_data:
        await message.answer("‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(text=message.text, text_set=True)
    await state.set_state(ReminderState.waiting_for_datetime)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`YYYY-MM-DD HH:MM` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `HH:MM` (—Å–µ–≥–æ–¥–Ω—è)",
                         parse_mode="Markdown")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
@dp.message(ReminderState.waiting_for_datetime)
async def remind_datetime_received(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data["text"]

    try:
        parts = message.text.split()

        if len(parts) == 1 and ":" in parts[0]:  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
            today = datetime.now().strftime("%Y-%m-%d")
            reminder_datetime = f"{today} {parts[0]}"
        elif len(parts) == 2:  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            reminder_datetime = f"{parts[0]} {parts[1]}"
        else:
            raise ValueError

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(reminder_datetime, "%Y-%m-%d %H:%M")

        add_reminder(message.from_user.id, reminder_datetime, text)
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime}: {text}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ `YYYY-MM-DD HH:MM` –∏–ª–∏ `HH:MM` (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è).",
                             parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(Command("reminders"))
async def list_reminders(message: Message):
    reminders = get_reminders(message.from_user.id)
    if not reminders:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for reminder in reminders:
        reminder_id, reminder_datetime, text = reminder
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚õî –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{reminder_id}")]
        ])
        await message.answer(f"‚è∞ {reminder_datetime} - {text}", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_reminder_callback(callback: types.CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])
    delete_reminder(reminder_id)
    await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (new reminder, view reminders)
@dp.callback_query(lambda c: c.data == "remind")
async def remind_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ "–û —á—ë–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?" –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    state_data = await state.get_data()
    if "text_set" not in state_data:  # –ú—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        await state.set_state(ReminderState.waiting_for_text)  # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º set_state()

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_remind")],
    ])
    await callback.message.answer("üìù –û —á—ë–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", reply_markup=kb)


@dp.callback_query(lambda c: c.data == "reminders")
async def reminders_menu_callback(callback: types.CallbackQuery):
    await callback.answer()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
    reminders = get_reminders(callback.from_user.id)
    if not reminders:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        for reminder in reminders:
            reminder_id, reminder_datetime, text = reminder
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚õî –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{reminder_id}")]
            ])
            await callback.message.answer(f"‚è∞ {reminder_datetime} - {text}", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="remind")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")]
    ])
    await callback.message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb)
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data == "cancel_remind")
async def cancel_remind_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="remind")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")]
    ])
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    init_db()
    asyncio.create_task(check_reminders())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
